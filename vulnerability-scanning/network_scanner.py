#!/usr/bin/env python3
"""
ANTIC Cameroon Advanced Network Scanner
Author: Bertrand Fossung
Date: 26-02-2025
"""

import argparse
import socket
import nmap
import logging
from datetime import datetime
from logging.handlers import RotatingFileHandler

# ASCII Banner
BANNER = r"""
    _   __      __  __________    ____                               
   / | / /___  / /_/ ____/   |  / __ \_________  ____  ____  __  __
  /  |/ / __ \/ __/ /   / /| | / /_/ / ___/ __ \/ __ \/ __ \/ / / /
 / /|  / /_/ / /_/ /___/ ___ |/ ____/ /  / /_/ / /_/ / /_/ / /_/ / 
/_/ |_/\____/\__/\____/_/  |_/_/   /_/   \____/ .___/ .___/\__, /  
                                             /_/   /_/    /____/  
"""

# Configure logging
def setup_logger(output_file):
    logger = logging.getLogger("ANTIC-Scanner")
    logger.setLevel(logging.DEBUG)
    
    # File handler with rotation (10MB per file, max 3 backups)
    file_handler = RotatingFileHandler(
        output_file, maxBytes=10*1024*1024, backupCount=3
    )
    file_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    )
    file_handler.setFormatter(file_formatter)
    
    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger

def comprehensive_scan(target_ip, ports):
    """Perform advanced scan with OS fingerprinting and vulnerability checks."""
    try:
        nm = nmap.PortScanner()
        nm.scan(
            target_ip,
            arguments=f"-p {','.join(map(str, ports))} -sV -O --script vulners"
        )
        
        results = {
            "os": nm[target_ip]['osmatch'][0]['name'] if nm[target_ip]['osmatch'] else "Unknown",
            "ports": {},
            "vulnerabilities": []
        }
        
        for proto in nm[target_ip].all_protocols():
            for port in nm[target_ip][proto].keys():
                service = nm[target_ip][proto][port]
                results['ports'][port] = {
                    "service": service['name'],
                    "version": service['version'],
                    "state": service['state']
                }
                
                # Extract CVEs from vulners script
                if 'script' in service and 'vulners' in service['script']:
                    results['vulnerabilities'].extend(
                        line.strip() for line in service['script']['vulners'].split('\n')
                        if "CVE-" in line
                    )
        
        return results
    except Exception as e:
        logging.error(f"Comprehensive scan failed: {str(e)}")
        return None

def generate_antic_report(target_ip, scan_data, output_file):
    """Generate ANTIC-compliant security assessment report."""
    report = f"""
ANTIC CAMEROON - NETWORK SECURITY ASSESSMENT
============================================
Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Target: {target_ip}
OS Detection: {scan_data['os']}

OPEN PORTS & SERVICES
---------------------
"""
    for port, info in scan_data['ports'].items():
        report += f"Port {port}: {info['service']} {info['version']}\n"

    if scan_data['vulnerabilities']:
        report += "\nCRITICAL VULNERABILITIES (CVE LIST)\n------------------------------\n"
        report += "\n".join(scan_data['vulnerabilities'][:5])  # Show top 5 CVEs
    
    with open(output_file, 'w') as f:
        f.write(report)
    
    logging.info(f"Generated ANTIC compliance report: {output_file}")

def main():
    print(BANNER)
    parser = argparse.ArgumentParser(
        description="Advanced Network Scanner for ANTIC Cameroon Cybersecurity Division",
        epilog="Example: sudo ./network-scanner.py --target 196.1.32.0/24 --ports 1-1024 --output antic_scan"
    )
    parser.add_argument("--target", required=True, help="IP address or CIDR range")
    parser.add_argument("--ports", default="1-1024", help="Port range (e.g., 21-443)")
    parser.add_argument("--output", required=True, help="Base name for log and report files")
    args = parser.parse_args()

    # Initialize logging
    logger = setup_logger(f"{args.output}.log")
    logger.info(f"Starting ANTIC security scan for {args.target}")
    
    start_port, end_port = map(int, args.ports.split("-"))
    ports = list(range(start_port, end_port + 1))
    
    try:
        scan_results = comprehensive_scan(args.target, ports)
        if scan_results:
            generate_antic_report(args.target, scan_results, f"{args.output}_report.txt")
            logger.warning(f"Detected {len(scan_results['vulnerabilities'])} potential vulnerabilities")
        else:
            logger.error("Scan failed to produce valid results")
    except KeyboardInterrupt:
        logger.error("Scan interrupted by user")
    except Exception as e:
        logger.critical(f"Critical failure: {str(e)}")

if __name__ == "__main__":
    main()
